<b> description: </b>

There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.
A critical connection is a connection that, if removed, will make some server unable to reach some other server.
Return all critical connections in the network in any order.

<b> example: </b>
Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.



class Solution {
    int time;
    vector<vector<int>> res;
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        if(connections.size() == 0 || n == 0) {
            return res;
        }
        this -> time = 1;
        unordered_map<int, vector<int>> graph;
        vector<int> low(n, n);
        vector<int> dnf(n, 0);
        vector<int> parent(n, -1);
        for(const auto connect: connections){
            graph[connect[0]].emplace_back(connect[1]);
            graph[connect[1]].emplace_back(connect[0]);
        }
        for(int i = 0; i < n; i++){
            if(dnf[i] == 0){
                dfs(i, graph, low, dnf, parent);
            }
        }
        return res;        
    }
    
    void dfs(int u, unordered_map<int, vector<int>> &graph, vector<int> &low, vector<int> &dnf, vector<int> &parent){
        low[u] = time;
        dnf[u] = time;
        time += 1;
        for(const int v: graph[u]){
            if(dnf[v] == 0){
                parent[v] = u;
                dfs(v, graph, low, dnf, parent);
                low[u] = min(low[u], low[v]);
                if(dnf[u] < low[v]){
                    res.emplace_back(vector<int>({u, v}));
                }
            }
            else if(parent[u] != v){
                low[u] = min(low[u], low[v]);
            }
        }
    }
};
